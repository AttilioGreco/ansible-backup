- name: Install list of packages
  package: 
    name: "{{item}}"
    state: installed
  with_items: "{{ restic_additional_pakage_nead }}"

- block:
  - name: Create restic cache folder
    file:
      path: "{{restic_XDG_CACHE_HOME}}"
      state: directory
      mode: 0755
  
  - name: esnure that cron is installed
    package:
      name: cron
      state: present
  
  - name: esnure that logrotate is installed
    apt: name=logrotate state=present
  
  - name: add crontab for "{{utility}}"
    cron:
      user: "{{item.value.user}}"
      name: "{{item.value.name}}"
      hour: "{{ item.value.hour }}"
      minute: "{{ item.value.minute }}"
      weekday: "{{ item.value.weekday }}"
      job: "{{item.value.job}}"
    with_dict: "{{ restic_cron | default({}) }}"
    when: 
      - restic
  - name: Install log rotate configuration
    template:
      src: "files/logrotate-backup-ubuntu"
      dest: "/etc/logrotate.d/backup"
      owner: "root"
      group: "root"
      mode: "0700"
    when: 
      - ansible_os_family == "Debian"
  
  - name: Install log rotate configuration
    template:
      src: "files/logrotate-backup-centos"
      dest: "/etc/logrotate.d/backup"
      owner: "root"
      group: "root"
      mode: "0700"
    when: 
      - ansible_os_family == "RedHat"
  when:
    - restic_activator == "cron"
 
- block:
  - name: create systemd service unit
    template:
      src: backup.service.j2
      dest: /etc/systemd/system/backup-{{utility.lower()}}.service
      owner: root
      group: root
      mode: 0644
  - name: create systemd timer
    template:
      src: backup.timer.j2
      dest: /etc/systemd/system/backup-{{utility.lower()}}.timer
      owner: root
      group: root
      mode: 0644
  - name: Start and Enable "backup-{{utility.lower()}}.timer" 
    systemd:
      name: "backup-{{utility.lower()}}.timer"
      daemon_reload: yes
      enabled: yes
      state: started
  when: 
    - restic_activator == "systemd"

#+----------------------------------------------------------------------------+
#|                                                                            |
#|                    C O P Y   B A C K U P S C R I T P                       |
#|                                                                            |
#+----------------------------------------------------------------------------+
 
- name: add customer data
  template:
    src: "templates/customer-data.sh.j2"
    dest: "{{ restic_install_path }}/restic/customer-data.sh"
    owner: "root"
    group: "root"
    mode: "0700"

- name: check if repo exist
  shell: |
    export OS_AUTH_URL="{{os_api}}"
    export OS_REGION_NAME="{{os_region}}"
    export OS_TENANT_IDo="{{os_project_id}}"
    export OS_TENANT_NAME="{{os_project}}"
    export OS_USERNAME="{{os_user}}"
    export OS_PASSWORD="{{os_password}}"
    export RESTIC_PASSWORD="{{restic_repository_password}}"
    export RESTIC_REPOSITORY="{{restic_repository}}"
    "{{restic_binary_path}}/restic" snapshots
  register: result
  ignore_errors: True
- name: debug 
  debug:
    var: result.stderr

- name: create restic repository
  shell: |
    export OS_AUTH_URL="{{os_api}}"
    export OS_REGION_NAME="{{os_region}}"
    export OS_TENANT_ID="{{os_project_id}}"
    export OS_TENANT_NAME="{{os_project}}"
    export OS_USERNAME="{{os_user}}"
    export OS_PASSWORD="{{os_password}}"
    export RESTIC_PASSWORD="{{restic_repository_password}}"
    export RESTIC_REPOSITORY="{{restic_repository}}"
    "{{restic_binary_path}}/restic" init
  when: 
    - restic_setup_repository
    - "'Is there a repository at the following location?' in result.stderr"

- name: add restic backup-file file scripts
  template:
    src: "templates/backup.sh.j2"
    dest: "{{ restic_install_path }}/restic/{{utility | lower}}_backup.sh"
    owner: "root"
    group: "root"
    mode: "0700"

- name: add check script
  template:
    src: "templates/check.sh.j2"
    dest: "{{ restic_install_path }}restic/check.sh"
    owner: "root"
    group: "root"
    mode: "0700"
  when: file

