#!/usr/bin/env bash

## Dipendenze:
## 1) restic
## 2) jq
## Opzionale: fusermount (pkg: fuse su CentOS e Ubuntu). Richiesto solo per `restic mount`.


export RESTIC_REPOSITORY="{{restic_repository}}"
source /usr/local/restic/customer-data.sh

## Per favore NON MODIFICATE la variabile RESTIC_PASSWORD.
## Viceversa i backup non saranno ripristinabili. 

export RESTIC_PASSWORD="{{restic_repository_password}}"
export XDG_CACHE_HOME="{{restic_XDG_CACHE_HOME}}"

export OS_ENDPOINT_TYPE=publicURL
export OS_INTERFACE=public
export OS_IDENTITY_API_VERSION=2

## L'init va dato SOLO la prima volta. Se il repo su
## Swift esiste giÃ , restituisce comunque errore.
#/usr/local/bin/restic init

## Esegue il backup dei database.

START=$(date "+%s")
TIMESTAMP=$(date --iso | tr -d -)
{%- if restic_activator != "systemd" -%} >  BACKUPPATH="{{restic_backup_path}}" {%- endif %}
RESTIC_BACKUP_LOG_PATH="{{backup_logpath}}"
mkdir -p "{{restic_backup_path}}"
mkdir -p "{{backup_logpath}}"
chown -R root:root  "{{restic_backup_path}}"


function prepare_bk {
  {{restic_backup_script}}
}

if prepare_bk; 
then
    if "{{restic_binary_path}}/restic" backup "{{restic_backup_path}}" {%- if restic_activator != "systemd" -%} >  $RESTIC_BACKUP_LOG_PATH/backup.log; {%- endif %}


    then
        END=$(/usr/local/bin/restic snapshots --json | jq '.[-1].time' | cut -d "." -f 1 | date "+%s")

        RUNTIME=$(( ${END} - ${START} ))

        curl -s -i -XPOST "http://{{ influxDB_url }}:{{ influxDB_port }}/write?db={{ influxDB_DatabaseName }}&u={{ influxDB_Username  }}&p={{ influxDB_Password }}" --data-binary \
	     "backup,customer=$CUSTOMER,host=$HOSTNAME,service_name=restic_{{utility}} status=1,elapsed=${RUNTIME}"

    else
        # Invia notifica se fallisce l'upload su swift.
        curl -s -i -XPOST "http://{{ influxDB_url }}:{{ influxDB_port }}/write?db={{ influxDB_DatabaseName }}&u={{ influxDB_Username  }}&p={{ influxDB_Password }}" --data-binary \
	     "backup,customer=$CUSTOMER,host=$HOSTNAME,service_name=restic_{{utility}} status=2,elapsed=${RUNTIME}"
    fi

else
    "{{restic_binary_path}}/restic" backup "{{restic_backup_path}}" {%- if restic_activator != "systemd" -%} >  $RESTIC_BACKUP_LOG_PATH/backup.log; {%- endif %}
    END=$("{{restic_binary_path}}/restic" snapshots --json | jq '.[-1].time' | cut -d "." -f 1 | date "+%s")

    RUNTIME=$(( ${END} - ${START} ))

    # Invia notifica se fallisce anche un solo dump.
    curl -i -XPOST "http://{{ influxDB_url }}:{{ influxDB_port }}/write?db={{ influxDB_DatabaseName }}&u={{ influxDB_Username  }}&p={{ influxDB_Password }}" --data-binary \
	  "backup,customer=$CUSTOMER,host=$HOSTNAME,service_name=restic_{{utility}} status=2,elapsed=${RUNTIME}"

fi

## Elenca i backup eseguiti.
#restic -r swift:${_CONTAINER}:/home snapshots

## Effettua un restore partendo dall'ultima snapshot.
## Per backup precedenti, indicare l'id della snapshot al posto di `latest`
## (vedi comando precedente). Altre opzioni:
## --target: directory di destinazione
## --include: specifica quale directory ripristinare
#restic -r swift:${_CONTAINER}:/home restore latest --target /restore
